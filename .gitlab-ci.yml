# Only spawn workflows for MRs or branches without MRs
workflow:
  rules:
  - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
    when: never
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED != "true"
    when: never
  - when: always

stages:
- test
- build
- lint
- deploy

include:
- template: Security/Secret-Detection.gitlab-ci.yml

default:
  interruptible: true
  retry:
    max: 2
    when:
    - unknown_failure
    - api_failure
    - runner_system_failure

.maven:
  # Any runner will do, Java is mostly-portable like that
  tags: [docker]

  # Settings to cache Maven downloads
  before_script:
  - mkdir -p .m2-repository/ && rm -rf ~/.m2/repository
  - ln -s "`realpath .m2-repository/`" ~/.m2/repository
  cache:
    key: maven
    paths:
    - .m2-repository
    when: always

# Check that the pre-commit hooks pass
precommit:
  stage: lint
  needs: []
  tags: [docker, linux/amd64]
  image: registry.gitlab.com/hpctoolkit/ci-images/selfcheck:amd64
  cache:
    key: precommit
    paths:
    - .pc-cache/
  script:
  - mkdir -p .pc-cache/ ~/.cache/
  - ln -s $(realpath .pc-cache/) ~/.cache/pre-commit
  - pre-commit run --all-files || { git diff | tee fixup.patch && exit 1; }
  artifacts:
    paths:
    - fixup.patch

secret_detection:
  stage: lint
  needs: []
  tags: [docker, linux/amd64]
  rules:
  - when: always

# Run all the tests within the Viewer and make sure everything passes
test:
  extends: .maven
  stage: test
  image: docker.io/maven:3-ibm-semeru-$JDK-focal
  tags: [docker, linux/$ARCH, services-work]
  parallel:
    matrix:
    - ARCH: [amd64, arm64]
      JDK: ['11', '17']
      WM: [metacity]
  dependencies: []

  # A running X server is required for tests to complete, we use Xvfb
  services:
  - name: registry.gitlab.com/hpctoolkit/ci-images/windowmanager:$ARCH
    alias: wm
  variables:
    ARCH: amd64
    DISPLAY: 'wm:99'
  script:
  - apt-get update && apt install -y python3 libswt-gtk-4-jni
  # Run Maven to build and test everything, but delay the exit until the end
  - mvn --fail-at-end clean verify -Pjacoco || FAIL=1
  # Report the coverage % to the log
  - ./scripts/extract-coverage.sh tests/edu.rice.cs.hpcviewer.test.report/target/site/jacoco-aggregate/jacoco.xml
  # Convert the JaCoCo results into Cobertura for GitLab visualization
  - >-
    python3 scripts/cover2cover.py tests/edu.rice.cs.hpcviewer.test.report/target/site/jacoco-aggregate/jacoco.xml
    $CI_PROJECT_DIR/edu.rice.cs.*/src
    $CI_PROJECT_DIR/externals/*/src
    > coverage.xml
  # If Maven failed, we fail
  - test -z "$FAIL"
  coverage: '/COMPLEXITY coverage: .*%/'
  artifacts:
    when: always
    paths:
    - tests/edu.rice.cs.hpcviewer.test.report/target/site/jacoco-aggregate/
    reports:
      junit: tests/*/target/surefire-reports/TEST-*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# Build the Viewer and package the results for usage by users
build:
  extends: .maven
  stage: build
  image: docker.io/maven:3-eclipse-temurin-11-focal
  script:
  # zip, tar and gzip is required for the repackaging steps
  - apt-get update && apt install -y zip tar gzip
  - ./build.sh --create --release ''
  artifacts:
    paths:
    - hpcviewer-*.tgz
    - hpcviewer-*.zip
    - hpcdata-*.tgz

# Lint job to check that all the to-deploy artifacts were indeed build
check deploy:
  stage: lint
  image: docker.io/alpine
  tags: [docker]
  needs: [build]

  script:
  - |
    deploy() {
      test -e "$1$2$3"
    }
  - &deployments
    - deploy hpcviewer -- linux.gtk.x86_64.tgz
    - deploy hpcviewer -- linux.gtk.ppc64le.tgz
    - deploy hpcviewer -- linux.gtk.aarch64.tgz
    - deploy hpcviewer -- macosx.cocoa.x86_64.zip
    - deploy hpcviewer -- macosx.cocoa.aarch64.zip
    - deploy hpcviewer -- win32.win32.x86_64.zip
    - deploy hpcdata - .tgz hpcdata.tgz

# Deploy the built artifacts to the package registry
deploy:
  stage: deploy
  image: docker.io/alpine
  dependencies: [build]

  rules:
  - if: $CI_COMMIT_REF_PROTECTED == null
    when: never
  - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    variables:
      VERSION: latest

  before_script:
  - apk add curl
  - test -n "$VERSION" || VERSION="${CI_COMMIT_TAG}"
  - test -n "$VERSION"
  script:
  - |
    deploy() {
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "$1$2$3" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${1}/${VERSION}/${4:-3}"
    }
  - *deployments
